exports[`Container > EditCommuter Create commuter 1`] = `
Object {
  "payload": Object {
    "commuter": Object {
      "address": "Abraham Lincoln/Emancipation Monument, Washington, USA",
      "email": "mock@email.fake",
      "lat": 38.89011,
      "lng": -76.9897,
      "name": "Mock Commuter",
    },
    "groupId": "1",
    "organizationId": "2",
  },
  "type": "add commuter",
}
`;

exports[`Container > EditCommuter Create commuter 2`] = `
Object {
  "payload": Object {
    "args": Array [
      "/organizations/2/groups/1",
    ],
    "method": "push",
  },
  "type": "@@router/CALL_HISTORY_METHOD",
}
`;

exports[`Container > EditCommuter Create/Edit Commuter View loads in create mode 1`] = `
<div
  className="commuter-header col-xs-12">
  <h3>
    <span>
      Create Commuter
    </span>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="default"
      className="pull-right"
      disabled={false}>
      <button
        className="pull-right btn btn-default"
        disabled={false}
        type="button">
        <Link
          onlyActiveOnIndex={false}
          style={Object {}}
          to="/organizations/2/groups/1">
          <a
            onClick={[Function]}
            style={Object {}}>
            <Icon
              type="arrow-left">
              <i
                className="fa fa-arrow-left fa-fw " />
            </Icon>
            <span>
              Back
            </span>
          </a>
        </Link>
      </button>
    </Button>
  </h3>
</div>
`;

exports[`Container > EditCommuter Create/Edit Commuter View loads in create mode 2`] = `
<div
  className="commuter-form col-md-5 col-xs-12">
  <form>
    <FieldGroup
      label="Name"
      name="name"
      onChange={[Function]}
      placeholder="Enter name"
      type="text"
      value={undefined}>
      <FormGroup
        bsClass="form-group"
        controlId="group-item-name">
        <div
          className="form-group">
          <ControlLabel
            bsClass="control-label"
            srOnly={false}>
            <label
              className="control-label"
              htmlFor="group-item-name">
              Name
            </label>
          </ControlLabel>
          <FormControl
            bsClass="form-control"
            componentClass="input"
            onChange={[Function]}
            placeholder="Enter name"
            type="text"
            value="">
            <input
              className="form-control"
              id="group-item-name"
              onChange={[Function]}
              placeholder="Enter name"
              type="text"
              value="" />
          </FormControl>
        </div>
      </FormGroup>
    </FieldGroup>
    <FieldGroup
      label="Email"
      name="email"
      onChange={[Function]}
      placeholder="Enter email"
      type="text"
      value={undefined}>
      <FormGroup
        bsClass="form-group"
        controlId="group-item-email">
        <div
          className="form-group">
          <ControlLabel
            bsClass="control-label"
            srOnly={false}>
            <label
              className="control-label"
              htmlFor="group-item-email">
              Email
            </label>
          </ControlLabel>
          <FormControl
            bsClass="form-control"
            componentClass="input"
            onChange={[Function]}
            placeholder="Enter email"
            type="text"
            value="">
            <input
              className="form-control"
              id="group-item-email"
              onChange={[Function]}
              placeholder="Enter email"
              type="text"
              value="" />
          </FormControl>
        </div>
      </FormGroup>
    </FieldGroup>
    <Geocoder
      label="address"
      onChange={[Function]}
      value={undefined}>
      <FormGroup
        bsClass="form-group"
        controlId="geocode-control">
        <div
          className="form-group">
          <ControlLabel
            bsClass="control-label"
            srOnly={false}>
            <label
              className="control-label"
              htmlFor="geocode-control">
              address
            </label>
          </ControlLabel>
          <Geocoder
            apiKey="test-search-key"
            boundary={
              Object {
                "circle": Object {
                  "latlng": Object {
                    "lat": 38.8886,
                    "lng": -77.043,
                    "radius": 275,
                  },
                  "radius": 275,
                },
              }
            }
            featureToLabel={[Function]}
            featureToValue={[Function]}
            onChange={[Function]}
            search={[Function]}
            value={undefined}>
            <Async
              apiKey="test-search-key"
              autoload={false}
              boundary={
                Object {
                  "circle": Object {
                    "latlng": Object {
                      "lat": 38.8886,
                      "lng": -77.043,
                      "radius": 275,
                    },
                    "radius": 275,
                  },
                }
              }
              cache={Object {}}
              cacheAsyncResults={false}
              featureToLabel={[Function]}
              featureToValue={[Function]}
              filterOptions={false}
              ignoreAccents={true}
              ignoreCase={true}
              loadOptions={[Function]}
              loadingPlaceholder="Loading..."
              minimumInput={3}
              onChange={[Function]}
              options={Array []}
              search={[Function]}
              searchPromptText="Type to search"
              value={null}>
              <Select
                addLabelText="Add \"{label}\"?"
                apiKey="test-search-key"
                arrowRenderer={[Function]}
                autoload={false}
                autosize={true}
                backspaceRemoves={true}
                backspaceToRemoveMessage="Press backspace to remove {label}"
                boundary={
                  Object {
                    "circle": Object {
                      "latlng": Object {
                        "lat": 38.8886,
                        "lng": -77.043,
                        "radius": 275,
                      },
                      "radius": 275,
                    },
                  }
                }
                cache={Object {}}
                cacheAsyncResults={false}
                clearAllText="Clear all"
                clearValueText="Clear value"
                clearable={true}
                delimiter=","
                disabled={false}
                escapeClearsValue={true}
                featureToLabel={[Function]}
                featureToValue={[Function]}
                filterOptions={false}
                ignoreAccents={true}
                ignoreCase={true}
                inputProps={Object {}}
                isLoading={false}
                joinValues={false}
                labelKey="label"
                loadOptions={[Function]}
                loadingPlaceholder="Loading..."
                matchPos="any"
                matchProp="any"
                menuBuffer={0}
                menuRenderer={[Function]}
                minimumInput={3}
                multi={false}
                noResultsText="Type to search"
                onBlurResetsInput={true}
                onChange={[Function]}
                onCloseResetsInput={true}
                onInputChange={[Function]}
                openAfterFocus={false}
                optionComponent={[Function]}
                options={Array []}
                pageSize={5}
                placeholder="Select..."
                required={false}
                scrollMenuIntoView={true}
                search={[Function]}
                searchPromptText="Type to search"
                searchable={true}
                simpleValue={false}
                tabSelectsValue={true}
                value={null}
                valueComponent={[Function]}
                valueKey="value">
                <div
                  className="Select Select--single is-searchable"
                  style={undefined}>
                  <div
                    className="Select-control"
                    onKeyDown={[Function]}
                    onMouseDown={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    style={undefined}>
                    <span
                      className="Select-multi-value-wrapper"
                      id="react-select-3--value">
                      <div
                        className="Select-placeholder">
                        Select...
                      </div>
                      <AutosizeInput
                        aria-activedescendant="react-select-3--value"
                        aria-expanded="false"
                        aria-haspopup="false"
                        aria-label={undefined}
                        aria-labelledby={undefined}
                        aria-owns=""
                        className="Select-input"
                        minWidth="5px"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        required={false}
                        role="combobox"
                        tabIndex={undefined}
                        value="">
                        <div
                          className="Select-input"
                          style={
                            Object {
                              "display": "inline-block",
                            }
                          }>
                          <input
                            aria-activedescendant="react-select-3--value"
                            aria-expanded="false"
                            aria-haspopup="false"
                            aria-label={undefined}
                            aria-labelledby={undefined}
                            aria-owns=""
                            className={undefined}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            role="combobox"
                            style={
                              Object {
                                "boxSizing": "content-box",
                                "width": "5pxpx",
                              }
                            }
                            tabIndex={undefined}
                            value="" />
                          <div
                            style={
                              Object {
                                "height": 0,
                                "left": 0,
                                "overflow": "scroll",
                                "position": "absolute",
                                "top": 0,
                                "visibility": "hidden",
                                "whiteSpace": "pre",
                              }
                            } />
                        </div>
                      </AutosizeInput>
                    </span>
                    <span
                      className="Select-arrow-zone"
                      onMouseDown={[Function]}>
                      <span
                        className="Select-arrow"
                        onMouseDown={[Function]} />
                    </span>
                  </div>
                </div>
              </Select>
            </Async>
          </Geocoder>
        </div>
      </FormGroup>
    </Geocoder>
  </form>
</div>
`;

exports[`Container > EditCommuter Create/Edit Commuter View loads in create mode 3`] = `
<div
  className="commuter-submit-buttons col-xs-12">
  <Button
    active={false}
    block={false}
    bsClass="btn"
    bsStyle="success"
    disabled={false}
    onClick={[Function]}>
    <button
      className="btn btn-success"
      disabled={false}
      onClick={[Function]}
      type="button">
      Create
    </button>
  </Button>
</div>
`;

exports[`Container > EditCommuter Create/Edit Commuter View loads in edit mode 1`] = `
<div
  className="commuter-header col-xs-12">
  <h3>
    <span>
      Edit Commuter
    </span>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="default"
      className="pull-right"
      disabled={false}>
      <button
        className="pull-right btn btn-default"
        disabled={false}
        type="button">
        <Link
          onlyActiveOnIndex={false}
          style={Object {}}
          to="/organizations/2/groups/1">
          <a
            onClick={[Function]}
            style={Object {}}>
            <Icon
              type="arrow-left">
              <i
                className="fa fa-arrow-left fa-fw " />
            </Icon>
            <span>
              Back
            </span>
          </a>
        </Link>
      </button>
    </Button>
  </h3>
</div>
`;

exports[`Container > EditCommuter Create/Edit Commuter View loads in edit mode 2`] = `
<div
  className="commuter-form col-md-5 col-xs-12">
  <form>
    <FieldGroup
      label="Name"
      name="name"
      onChange={[Function]}
      placeholder="Enter name"
      type="text"
      value="Luke Warm">
      <FormGroup
        bsClass="form-group"
        controlId="group-item-name">
        <div
          className="form-group">
          <ControlLabel
            bsClass="control-label"
            srOnly={false}>
            <label
              className="control-label"
              htmlFor="group-item-name">
              Name
            </label>
          </ControlLabel>
          <FormControl
            bsClass="form-control"
            componentClass="input"
            onChange={[Function]}
            placeholder="Enter name"
            type="text"
            value="Luke Warm">
            <input
              className="form-control"
              id="group-item-name"
              onChange={[Function]}
              placeholder="Enter name"
              type="text"
              value="Luke Warm" />
          </FormControl>
        </div>
      </FormGroup>
    </FieldGroup>
    <FieldGroup
      label="Email"
      name="email"
      onChange={[Function]}
      placeholder="Enter email"
      type="text"
      value="luke@warm.cold">
      <FormGroup
        bsClass="form-group"
        controlId="group-item-email">
        <div
          className="form-group">
          <ControlLabel
            bsClass="control-label"
            srOnly={false}>
            <label
              className="control-label"
              htmlFor="group-item-email">
              Email
            </label>
          </ControlLabel>
          <FormControl
            bsClass="form-control"
            componentClass="input"
            onChange={[Function]}
            placeholder="Enter email"
            type="text"
            value="luke@warm.cold">
            <input
              className="form-control"
              id="group-item-email"
              onChange={[Function]}
              placeholder="Enter email"
              type="text"
              value="luke@warm.cold" />
          </FormControl>
        </div>
      </FormGroup>
    </FieldGroup>
    <Geocoder
      label="address"
      onChange={[Function]}
      value={
        Object {
          "label": "4321 XYZ Boulevard",
        }
      }>
      <FormGroup
        bsClass="form-group"
        controlId="geocode-control">
        <div
          className="form-group">
          <ControlLabel
            bsClass="control-label"
            srOnly={false}>
            <label
              className="control-label"
              htmlFor="geocode-control">
              address
            </label>
          </ControlLabel>
          <Geocoder
            apiKey="test-search-key"
            boundary={
              Object {
                "circle": Object {
                  "latlng": Object {
                    "lat": 38.8886,
                    "lng": -77.043,
                    "radius": 275,
                  },
                  "radius": 275,
                },
              }
            }
            featureToLabel={[Function]}
            featureToValue={[Function]}
            onChange={[Function]}
            search={[Function]}
            value={
              Object {
                "label": "4321 XYZ Boulevard",
              }
            }>
            <Async
              apiKey="test-search-key"
              autoload={false}
              boundary={
                Object {
                  "circle": Object {
                    "latlng": Object {
                      "lat": 38.8886,
                      "lng": -77.043,
                      "radius": 275,
                    },
                    "radius": 275,
                  },
                }
              }
              cache={Object {}}
              cacheAsyncResults={false}
              featureToLabel={[Function]}
              featureToValue={[Function]}
              filterOptions={false}
              ignoreAccents={true}
              ignoreCase={true}
              loadOptions={[Function]}
              loadingPlaceholder="Loading..."
              minimumInput={3}
              onChange={[Function]}
              options={Array []}
              search={[Function]}
              searchPromptText="Type to search"
              value={
                Object {
                  "label": "4321 XYZ Boulevard",
                }
              }>
              <Select
                addLabelText="Add \"{label}\"?"
                apiKey="test-search-key"
                arrowRenderer={[Function]}
                autoload={false}
                autosize={true}
                backspaceRemoves={true}
                backspaceToRemoveMessage="Press backspace to remove {label}"
                boundary={
                  Object {
                    "circle": Object {
                      "latlng": Object {
                        "lat": 38.8886,
                        "lng": -77.043,
                        "radius": 275,
                      },
                      "radius": 275,
                    },
                  }
                }
                cache={Object {}}
                cacheAsyncResults={false}
                clearAllText="Clear all"
                clearValueText="Clear value"
                clearable={true}
                delimiter=","
                disabled={false}
                escapeClearsValue={true}
                featureToLabel={[Function]}
                featureToValue={[Function]}
                filterOptions={false}
                ignoreAccents={true}
                ignoreCase={true}
                inputProps={Object {}}
                isLoading={false}
                joinValues={false}
                labelKey="label"
                loadOptions={[Function]}
                loadingPlaceholder="Loading..."
                matchPos="any"
                matchProp="any"
                menuBuffer={0}
                menuRenderer={[Function]}
                minimumInput={3}
                multi={false}
                noResultsText="Type to search"
                onBlurResetsInput={true}
                onChange={[Function]}
                onCloseResetsInput={true}
                onInputChange={[Function]}
                openAfterFocus={false}
                optionComponent={[Function]}
                options={Array []}
                pageSize={5}
                placeholder="Select..."
                required={false}
                scrollMenuIntoView={true}
                search={[Function]}
                searchPromptText="Type to search"
                searchable={true}
                simpleValue={false}
                tabSelectsValue={true}
                value={
                  Object {
                    "label": "4321 XYZ Boulevard",
                  }
                }
                valueComponent={[Function]}
                valueKey="value">
                <div
                  className="Select Select--single is-searchable has-value"
                  style={undefined}>
                  <div
                    className="Select-control"
                    onKeyDown={[Function]}
                    onMouseDown={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    style={undefined}>
                    <span
                      className="Select-multi-value-wrapper"
                      id="react-select-4--value">
                      <Value
                        disabled={false}
                        id="react-select-4--value-item"
                        instancePrefix="react-select-4-"
                        onClick={null}
                        value={
                          Object {
                            "label": "4321 XYZ Boulevard",
                          }
                        }>
                        <div
                          className="Select-value"
                          style={undefined}
                          title={undefined}>
                          <span
                            aria-selected="true"
                            className="Select-value-label"
                            id="react-select-4--value-item"
                            role="option">
                            4321 XYZ Boulevard
                          </span>
                        </div>
                      </Value>
                      <AutosizeInput
                        aria-activedescendant="react-select-4--value"
                        aria-expanded="false"
                        aria-haspopup="false"
                        aria-label={undefined}
                        aria-labelledby={undefined}
                        aria-owns=""
                        className="Select-input"
                        minWidth="5px"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        required={false}
                        role="combobox"
                        tabIndex={undefined}
                        value="">
                        <div
                          className="Select-input"
                          style={
                            Object {
                              "display": "inline-block",
                            }
                          }>
                          <input
                            aria-activedescendant="react-select-4--value"
                            aria-expanded="false"
                            aria-haspopup="false"
                            aria-label={undefined}
                            aria-labelledby={undefined}
                            aria-owns=""
                            className={undefined}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            role="combobox"
                            style={
                              Object {
                                "boxSizing": "content-box",
                                "width": "5pxpx",
                              }
                            }
                            tabIndex={undefined}
                            value="" />
                          <div
                            style={
                              Object {
                                "height": 0,
                                "left": 0,
                                "overflow": "scroll",
                                "position": "absolute",
                                "top": 0,
                                "visibility": "hidden",
                                "whiteSpace": "pre",
                              }
                            } />
                        </div>
                      </AutosizeInput>
                    </span>
                    <span
                      aria-label="Clear value"
                      className="Select-clear-zone"
                      onMouseDown={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      title="Clear value">
                      <span
                        className="Select-clear"
                        dangerouslySetInnerHTML={
                          Object {
                            "__html": "&times;",
                          }
                        } />
                    </span>
                    <span
                      className="Select-arrow-zone"
                      onMouseDown={[Function]}>
                      <span
                        className="Select-arrow"
                        onMouseDown={[Function]} />
                    </span>
                  </div>
                </div>
              </Select>
            </Async>
          </Geocoder>
        </div>
      </FormGroup>
    </Geocoder>
  </form>
</div>
`;

exports[`Container > EditCommuter Create/Edit Commuter View loads in edit mode 3`] = `
<div
  className="commuter-submit-buttons col-xs-12">
  <Button
    active={false}
    block={false}
    bsClass="btn"
    bsStyle="warning"
    disabled={false}
    onClick={[Function]}>
    <button
      className="btn btn-warning"
      disabled={false}
      onClick={[Function]}
      type="button">
      Update
    </button>
  </Button>
  <Button
    active={false}
    block={false}
    bsClass="btn"
    bsStyle="danger"
    disabled={false}
    onClick={[Function]}>
    <button
      className="btn btn-danger"
      disabled={false}
      onClick={[Function]}
      type="button">
      Delete
    </button>
  </Button>
</div>
`;

exports[`Container > EditCommuter Create/Edit Commuter View loads in edit mode 4`] = `
Object {
  "lat": 38.916089,
  "lng": -76.970221,
  "lon": -76.970221,
}
`;

exports[`Container > EditCommuter Delete Commuter 1`] = `
Array [
  Object {
    "payload": Object {
      "commuterId": "1",
      "groupId": "1",
      "organizationId": "2",
    },
    "type": "delete commuter",
  },
  Object {
    "payload": Object {
      "args": Array [
        "/organizations/2/groups/1",
      ],
      "method": "push",
    },
    "type": "@@router/CALL_HISTORY_METHOD",
  },
]
`;

exports[`Container > EditCommuter Update commuter 1`] = `
Object {
  "payload": Object {
    "commuter": Object {
      "address": "Abraham Lincoln/Emancipation Monument, Washington, USA",
      "email": "mock@email.fake",
      "id": "1",
      "lat": 38.89011,
      "lng": -76.9897,
      "name": "Mock Commuter",
    },
    "groupId": "1",
    "organizationId": "2",
  },
  "type": "update commuter",
}
`;

exports[`Container > EditCommuter Update commuter 2`] = `
Object {
  "payload": Object {
    "args": Array [
      "/organizations/2/groups/1",
    ],
    "method": "push",
  },
  "type": "@@router/CALL_HISTORY_METHOD",
}
`;
