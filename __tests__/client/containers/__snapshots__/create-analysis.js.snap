exports[`Container > CreateAnalysis Create Analysis View loads 1`] = `
<Connect(CreateAnalysis)
  params={
    Object {
      "organizationId": "organization-2",
    }
  }>
  <CreateAnalysis
    create={[Function]}
    groups={
      Array [
        Object {
          "_id": "group-2",
          "allAddressesGeocoded": true,
          "commuters": Array [
            "commuter-2",
          ],
          "name": "Mock Group",
          "organizationId": "organization-2",
        },
      ]
    }
    groupsById={
      Object {
        "group-2": Object {
          "_id": "group-2",
          "allAddressesGeocoded": true,
          "commuters": Array [
            "commuter-2",
          ],
          "name": "Mock Group",
          "organizationId": "organization-2",
        },
      }
    }
    organizationId="organization-2"
    params={
      Object {
        "organizationId": "organization-2",
      }
    }
    sites={
      Array [
        Object {
          "_id": "site-2",
          "address": "123 ABC St",
          "city": "Megalopolis",
          "coordinate": Object {
            "lat": 38.892767,
            "lon": -77.04074,
          },
          "country": "Made up land",
          "county": "Made up county",
          "name": "Acme Corp",
          "neighbourhood": undefined,
          "organizationId": "organization-2",
          "radius": 1,
          "state": "Made up state",
        },
      ]
    }>
    <Grid
      bsClass="container"
      componentClass="div"
      fluid={false}>
      <div
        className="container">
        <Row
          bsClass="row"
          componentClass="div">
          <div
            className="row">
            <Col
              bsClass="col"
              componentClass="div"
              xs={12}>
              <div
                className="col-xs-12">
                <h3>
                  <span>
                    Create Analysis
                  </span>
                  <ButtonLink
                    className="pull-right"
                    to="/organization/organization-2">
                    <Button
                      active={false}
                      block={false}
                      bsClass="btn"
                      bsStyle="default"
                      className="pull-right"
                      disabled={false}
                      onClick={[Function]}
                      to="/organization/organization-2">
                      <button
                        className="pull-right btn btn-default"
                        disabled={false}
                        onClick={[Function]}
                        to="/organization/organization-2"
                        type="button">
                        <Icon
                          type="arrow-left">
                          <i
                            className="fa fa-arrow-left fa-fw " />
                        </Icon>
                        <span>
                          Back
                        </span>
                      </button>
                    </Button>
                  </ButtonLink>
                </h3>
                <Uncontrolled(Form)
                  onChange={[Function]}
                  onError={[Function]}
                  onSubmit={[Function]}
                  schema={
                    ObjectSchema {
                      "_blacklist": BadSet {
                        "_map": Object {},
                        "_refs": Object {},
                      },
                      "_conditions": Array [],
                      "_defaultDefault": [Function],
                      "_deps": Array [],
                      "_excludedEdges": Array [
                        "undefined-undefined",
                      ],
                      "_exclusive": Object {},
                      "_mutate": false,
                      "_nodes": Array [
                        "siteId",
                        "groupId",
                        "name",
                      ],
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "object",
                      "_typeError": [Function],
                      "_whitelist": BadSet {
                        "_map": Object {},
                        "_refs": Object {},
                      },
                      "fields": Object {
                        "groupId": StringSchema {
                          "_blacklist": BadSet {
                            "_map": Object {},
                            "_refs": Object {},
                          },
                          "_conditions": Array [],
                          "_deps": Array [],
                          "_exclusive": Object {
                            "required": false,
                          },
                          "_label": "Group",
                          "_mutate": false,
                          "_options": Object {
                            "abortEarly": true,
                            "recursive": true,
                          },
                          "_type": "string",
                          "_typeError": [Function],
                          "_whitelist": BadSet {
                            "_map": Object {},
                            "_refs": Object {},
                          },
                          "tests": Array [
                            [Function],
                            [Function],
                          ],
                          "transforms": Array [
                            [Function],
                          ],
                        },
                        "name": StringSchema {
                          "_blacklist": BadSet {
                            "_map": Object {},
                            "_refs": Object {},
                          },
                          "_conditions": Array [],
                          "_deps": Array [],
                          "_exclusive": Object {
                            "required": false,
                          },
                          "_label": "Analysis Name",
                          "_mutate": false,
                          "_options": Object {
                            "abortEarly": true,
                            "recursive": true,
                          },
                          "_type": "string",
                          "_typeError": [Function],
                          "_whitelist": BadSet {
                            "_map": Object {},
                            "_refs": Object {},
                          },
                          "tests": Array [
                            [Function],
                            [Function],
                          ],
                          "transforms": Array [
                            [Function],
                          ],
                        },
                        "siteId": StringSchema {
                          "_blacklist": BadSet {
                            "_map": Object {},
                            "_refs": Object {},
                          },
                          "_conditions": Array [],
                          "_deps": Array [],
                          "_exclusive": Object {
                            "required": false,
                          },
                          "_label": "Site",
                          "_mutate": false,
                          "_options": Object {
                            "abortEarly": true,
                            "recursive": true,
                          },
                          "_type": "string",
                          "_typeError": [Function],
                          "_whitelist": BadSet {
                            "_map": Object {},
                            "_refs": Object {},
                          },
                          "tests": Array [
                            [Function],
                            [Function],
                          ],
                          "transforms": Array [
                            [Function],
                          ],
                        },
                      },
                      "tests": Array [],
                      "transforms": Array [
                        [Function],
                      ],
                    }
                  }
                  value={
                    Object {
                      "organizationId": "organization-2",
                    }
                  }>
                  <Form
                    component="form"
                    delay={300}
                    getter={[Function]}
                    onChange={[Function]}
                    onError={[Function]}
                    onSubmit={[Function]}
                    schema={
                      ObjectSchema {
                        "_blacklist": BadSet {
                          "_map": Object {},
                          "_refs": Object {},
                        },
                        "_conditions": Array [],
                        "_defaultDefault": [Function],
                        "_deps": Array [],
                        "_excludedEdges": Array [
                          "undefined-undefined",
                        ],
                        "_exclusive": Object {},
                        "_mutate": false,
                        "_nodes": Array [
                          "siteId",
                          "groupId",
                          "name",
                        ],
                        "_options": Object {
                          "abortEarly": true,
                          "recursive": true,
                        },
                        "_type": "object",
                        "_typeError": [Function],
                        "_whitelist": BadSet {
                          "_map": Object {},
                          "_refs": Object {},
                        },
                        "fields": Object {
                          "groupId": StringSchema {
                            "_blacklist": BadSet {
                              "_map": Object {},
                              "_refs": Object {},
                            },
                            "_conditions": Array [],
                            "_deps": Array [],
                            "_exclusive": Object {
                              "required": false,
                            },
                            "_label": "Group",
                            "_mutate": false,
                            "_options": Object {
                              "abortEarly": true,
                              "recursive": true,
                            },
                            "_type": "string",
                            "_typeError": [Function],
                            "_whitelist": BadSet {
                              "_map": Object {},
                              "_refs": Object {},
                            },
                            "tests": Array [
                              [Function],
                              [Function],
                            ],
                            "transforms": Array [
                              [Function],
                            ],
                          },
                          "name": StringSchema {
                            "_blacklist": BadSet {
                              "_map": Object {},
                              "_refs": Object {},
                            },
                            "_conditions": Array [],
                            "_deps": Array [],
                            "_exclusive": Object {
                              "required": false,
                            },
                            "_label": "Analysis Name",
                            "_mutate": false,
                            "_options": Object {
                              "abortEarly": true,
                              "recursive": true,
                            },
                            "_type": "string",
                            "_typeError": [Function],
                            "_whitelist": BadSet {
                              "_map": Object {},
                              "_refs": Object {},
                            },
                            "tests": Array [
                              [Function],
                              [Function],
                            ],
                            "transforms": Array [
                              [Function],
                            ],
                          },
                          "siteId": StringSchema {
                            "_blacklist": BadSet {
                              "_map": Object {},
                              "_refs": Object {},
                            },
                            "_conditions": Array [],
                            "_deps": Array [],
                            "_exclusive": Object {
                              "required": false,
                            },
                            "_label": "Site",
                            "_mutate": false,
                            "_options": Object {
                              "abortEarly": true,
                              "recursive": true,
                            },
                            "_type": "string",
                            "_typeError": [Function],
                            "_whitelist": BadSet {
                              "_map": Object {},
                              "_refs": Object {},
                            },
                            "tests": Array [
                              [Function],
                              [Function],
                            ],
                            "transforms": Array [
                              [Function],
                            ],
                          },
                        },
                        "tests": Array [],
                        "transforms": Array [
                          [Function],
                        ],
                      }
                    }
                    setter={[Function]}
                    strict={false}
                    value={
                      Object {
                        "organizationId": "organization-2",
                      }
                    }>
                    <BindingContext
                      getter={[Function]}
                      onChange={[Function]}
                      setter={[Function]}
                      value={
                        Object {
                          "organizationId": "organization-2",
                        }
                      }>
                      <MessageListener
                        onValidationNeeded={[Function]}>
                        <MessageContainer
                          mapNames={[Function]}
                          messages={Object {}}
                          onValidationNeeded={[Function]}>
                          <form
                            noValidate={true}
                            onSubmit={[Function]}>
                            <FormalFieldGroup
                              label="Analysis Name"
                              name="name"
                              placeholder="Enter name">
                              <FormGroup
                                bsClass="form-group"
                                controlId="group-item-name">
                                <div
                                  className="form-group">
                                  <ControlLabel
                                    bsClass="control-label"
                                    srOnly={false}>
                                    <label
                                      className="control-label"
                                      htmlFor="group-item-name">
                                      Analysis Name
                                    </label>
                                  </ControlLabel>
                                  <Field
                                    className="form-control"
                                    exclusive={false}
                                    name="name"
                                    placeholder="Enter name"
                                    type="">
                                    <Binding
                                      bindTo={[Function]}
                                      changeProp="onChange"
                                      mapValue={
                                        Object {
                                          "name": undefined,
                                        }
                                      }
                                      updateAfterChild={false}
                                      valueProp="value">
                                      <ChildBridge
                                        events="onChange"
                                        onEvent={[Function]}>
                                        <MessageListener
                                          events={
                                            Array [
                                              "onChange",
                                              "onBlur",
                                            ]
                                          }
                                          for="name"
                                          mapMessages={[Function]}>
                                          <MessageTrigger
                                            events={
                                              Array [
                                                "onChange",
                                                "onBlur",
                                              ]
                                            }
                                            for="name"
                                            mapMessages={[Function]}
                                            messages={Object {}}
                                            noValidate={false}>
                                            <ChildBridge
                                              events={
                                                Array [
                                                  "onChange",
                                                  "onBlur",
                                                ]
                                              }
                                              onEvent={[Function]}>
                                              <_class
                                                className="form-control"
                                                meta={
                                                  Object {
                                                    "context": undefined,
                                                    "errorClass": "invalid-field",
                                                    "errors": Object {},
                                                    "invalid": false,
                                                    "onError": [Function],
                                                    "resolvedType": "string",
                                                    "schema": StringSchema {
                                                      "_blacklist": BadSet {
                                                        "_map": Object {},
                                                        "_refs": Object {},
                                                      },
                                                      "_conditions": Array [],
                                                      "_deps": Array [],
                                                      "_exclusive": Object {
                                                        "required": false,
                                                      },
                                                      "_label": "Analysis Name",
                                                      "_mutate": false,
                                                      "_options": Object {
                                                        "abortEarly": true,
                                                        "recursive": true,
                                                      },
                                                      "_type": "string",
                                                      "_typeError": [Function],
                                                      "_whitelist": BadSet {
                                                        "_map": Object {},
                                                        "_refs": Object {},
                                                      },
                                                      "tests": Array [
                                                        [Function],
                                                        [Function],
                                                      ],
                                                      "transforms": Array [
                                                        [Function],
                                                      ],
                                                    },
                                                    "valid": true,
                                                  }
                                                }
                                                name="name"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                placeholder="Enter name"
                                                value={null}>
                                                <Input
                                                  className="form-control"
                                                  meta={
                                                    Object {
                                                      "context": undefined,
                                                      "errorClass": "invalid-field",
                                                      "errors": Object {},
                                                      "invalid": false,
                                                      "onError": [Function],
                                                      "resolvedType": "string",
                                                      "schema": StringSchema {
                                                        "_blacklist": BadSet {
                                                          "_map": Object {},
                                                          "_refs": Object {},
                                                        },
                                                        "_conditions": Array [],
                                                        "_deps": Array [],
                                                        "_exclusive": Object {
                                                          "required": false,
                                                        },
                                                        "_label": "Analysis Name",
                                                        "_mutate": false,
                                                        "_options": Object {
                                                          "abortEarly": true,
                                                          "recursive": true,
                                                        },
                                                        "_type": "string",
                                                        "_typeError": [Function],
                                                        "_whitelist": BadSet {
                                                          "_map": Object {},
                                                          "_refs": Object {},
                                                        },
                                                        "tests": Array [
                                                          [Function],
                                                          [Function],
                                                        ],
                                                        "transforms": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "valid": true,
                                                    }
                                                  }
                                                  name="name"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  placeholder="Enter name"
                                                  type="text"
                                                  value={null}>
                                                  <input
                                                    className="form-control"
                                                    name="name"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    placeholder="Enter name"
                                                    type="text"
                                                    value="" />
                                                </Input>
                                              </_class>
                                            </ChildBridge>
                                          </MessageTrigger>
                                        </MessageListener>
                                      </ChildBridge>
                                    </Binding>
                                  </Field>
                                  <ValidationMessage
                                    className="help-block"
                                    component="span"
                                    errorClass="validation-error"
                                    extract={[Function]}
                                    filter={[Function]}
                                    for="name">
                                    <MessageListener
                                      className="help-block validation-error"
                                      component="span"
                                      for="name">
                                      <Message
                                        className="help-block validation-error"
                                        component="span"
                                        for="name"
                                        messages={Object {}} />
                                    </MessageListener>
                                  </ValidationMessage>
                                </div>
                              </FormGroup>
                            </FormalFieldGroup>
                            <FormalFieldGroup
                              data={
                                Array [
                                  Object {
                                    "_id": "site-2",
                                    "address": "123 ABC St",
                                    "city": "Megalopolis",
                                    "coordinate": Object {
                                      "lat": 38.892767,
                                      "lon": -77.04074,
                                    },
                                    "country": "Made up land",
                                    "county": "Made up county",
                                    "name": "Acme Corp",
                                    "neighbourhood": undefined,
                                    "organizationId": "organization-2",
                                    "radius": 1,
                                    "state": "Made up state",
                                  },
                                ]
                              }
                              filter="contains"
                              label="Site"
                              mapFromValue={[Function]}
                              name="siteId"
                              textField="name"
                              type="dropdownlist"
                              valueField="_id">
                              <FormGroup
                                bsClass="form-group"
                                controlId="group-item-siteId">
                                <div
                                  className="form-group">
                                  <ControlLabel
                                    bsClass="control-label"
                                    srOnly={false}>
                                    <label
                                      className="control-label"
                                      htmlFor="group-item-siteId">
                                      Site
                                    </label>
                                  </ControlLabel>
                                  <Field
                                    className=""
                                    data={
                                      Array [
                                        Object {
                                          "_id": "site-2",
                                          "address": "123 ABC St",
                                          "city": "Megalopolis",
                                          "coordinate": Object {
                                            "lat": 38.892767,
                                            "lon": -77.04074,
                                          },
                                          "country": "Made up land",
                                          "county": "Made up county",
                                          "name": "Acme Corp",
                                          "neighbourhood": undefined,
                                          "organizationId": "organization-2",
                                          "radius": 1,
                                          "state": "Made up state",
                                        },
                                      ]
                                    }
                                    exclusive={false}
                                    filter="contains"
                                    mapFromValue={[Function]}
                                    name="siteId"
                                    textField="name"
                                    type="dropdownlist"
                                    valueField="_id">
                                    <Binding
                                      bindTo={[Function]}
                                      changeProp="onChange"
                                      mapValue={
                                        Object {
                                          "siteId": [Function],
                                        }
                                      }
                                      updateAfterChild={false}
                                      valueProp="value">
                                      <ChildBridge
                                        events="onChange"
                                        onEvent={[Function]}>
                                        <MessageListener
                                          events={
                                            Array [
                                              "onChange",
                                              "onBlur",
                                            ]
                                          }
                                          for="siteId"
                                          mapMessages={[Function]}>
                                          <MessageTrigger
                                            events={
                                              Array [
                                                "onChange",
                                                "onBlur",
                                              ]
                                            }
                                            for="siteId"
                                            mapMessages={[Function]}
                                            messages={Object {}}
                                            noValidate={false}>
                                            <ChildBridge
                                              events={
                                                Array [
                                                  "onChange",
                                                  "onBlur",
                                                ]
                                              }
                                              onEvent={[Function]}>
                                              <Uncontrolled(DropdownList)
                                                className=""
                                                data={
                                                  Array [
                                                    Object {
                                                      "_id": "site-2",
                                                      "address": "123 ABC St",
                                                      "city": "Megalopolis",
                                                      "coordinate": Object {
                                                        "lat": 38.892767,
                                                        "lon": -77.04074,
                                                      },
                                                      "country": "Made up land",
                                                      "county": "Made up county",
                                                      "name": "Acme Corp",
                                                      "neighbourhood": undefined,
                                                      "organizationId": "organization-2",
                                                      "radius": 1,
                                                      "state": "Made up state",
                                                    },
                                                  ]
                                                }
                                                filter="contains"
                                                meta={
                                                  Object {
                                                    "context": undefined,
                                                    "errorClass": "invalid-field",
                                                    "errors": Object {},
                                                    "invalid": false,
                                                    "onError": [Function],
                                                    "resolvedType": "dropdownlist",
                                                    "schema": StringSchema {
                                                      "_blacklist": BadSet {
                                                        "_map": Object {},
                                                        "_refs": Object {},
                                                      },
                                                      "_conditions": Array [],
                                                      "_deps": Array [],
                                                      "_exclusive": Object {
                                                        "required": false,
                                                      },
                                                      "_label": "Site",
                                                      "_mutate": false,
                                                      "_options": Object {
                                                        "abortEarly": true,
                                                        "recursive": true,
                                                      },
                                                      "_type": "string",
                                                      "_typeError": [Function],
                                                      "_whitelist": BadSet {
                                                        "_map": Object {},
                                                        "_refs": Object {},
                                                      },
                                                      "tests": Array [
                                                        [Function],
                                                        [Function],
                                                      ],
                                                      "transforms": Array [
                                                        [Function],
                                                      ],
                                                    },
                                                    "valid": true,
                                                  }
                                                }
                                                name="siteId"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                textField="name"
                                                value={null}
                                                valueField="_id">
                                                <DropdownList
                                                  ariaActiveDescendantKey="dropdownlist"
                                                  caseSensitive={false}
                                                  className=""
                                                  data={
                                                    Array [
                                                      Object {
                                                        "_id": "site-2",
                                                        "address": "123 ABC St",
                                                        "city": "Megalopolis",
                                                        "coordinate": Object {
                                                          "lat": 38.892767,
                                                          "lon": -77.04074,
                                                        },
                                                        "country": "Made up land",
                                                        "county": "Made up county",
                                                        "name": "Acme Corp",
                                                        "neighbourhood": undefined,
                                                        "organizationId": "organization-2",
                                                        "radius": 1,
                                                        "state": "Made up state",
                                                      },
                                                    ]
                                                  }
                                                  delay={500}
                                                  filter="contains"
                                                  messages={
                                                    Object {
                                                      "emptyFilter": "The filter returned no results",
                                                      "emptyList": "There are no items in this list",
                                                      "filterPlaceholder": "",
                                                      "open": "open dropdown",
                                                    }
                                                  }
                                                  meta={
                                                    Object {
                                                      "context": undefined,
                                                      "errorClass": "invalid-field",
                                                      "errors": Object {},
                                                      "invalid": false,
                                                      "onError": [Function],
                                                      "resolvedType": "dropdownlist",
                                                      "schema": StringSchema {
                                                        "_blacklist": BadSet {
                                                          "_map": Object {},
                                                          "_refs": Object {},
                                                        },
                                                        "_conditions": Array [],
                                                        "_deps": Array [],
                                                        "_exclusive": Object {
                                                          "required": false,
                                                        },
                                                        "_label": "Site",
                                                        "_mutate": false,
                                                        "_options": Object {
                                                          "abortEarly": true,
                                                          "recursive": true,
                                                        },
                                                        "_type": "string",
                                                        "_typeError": [Function],
                                                        "_whitelist": BadSet {
                                                          "_map": Object {},
                                                          "_refs": Object {},
                                                        },
                                                        "tests": Array [
                                                          [Function],
                                                          [Function],
                                                        ],
                                                        "transforms": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "valid": true,
                                                    }
                                                  }
                                                  minLength={1}
                                                  name="siteId"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onSearch={[Function]}
                                                  onToggle={[Function]}
                                                  open={false}
                                                  searchTerm=""
                                                  textField="name"
                                                  value={null}
                                                  valueField="_id">
                                                  <Widget
                                                    aria-autocomplete="list"
                                                    aria-busy={false}
                                                    aria-disabled={false}
                                                    aria-expanded={false}
                                                    aria-haspopup={true}
                                                    aria-live="polite"
                                                    aria-owns="rw_1__listbox"
                                                    aria-readonly={false}
                                                    className="rw-dropdownlist"
                                                    disabled={false}
                                                    meta={
                                                      Object {
                                                        "context": undefined,
                                                        "errorClass": "invalid-field",
                                                        "errors": Object {},
                                                        "invalid": false,
                                                        "onError": [Function],
                                                        "resolvedType": "dropdownlist",
                                                        "schema": StringSchema {
                                                          "_blacklist": BadSet {
                                                            "_map": Object {},
                                                            "_refs": Object {},
                                                          },
                                                          "_conditions": Array [],
                                                          "_deps": Array [],
                                                          "_exclusive": Object {
                                                            "required": false,
                                                          },
                                                          "_label": "Site",
                                                          "_mutate": false,
                                                          "_options": Object {
                                                            "abortEarly": true,
                                                            "recursive": true,
                                                          },
                                                          "_type": "string",
                                                          "_typeError": [Function],
                                                          "_whitelist": BadSet {
                                                            "_map": Object {},
                                                            "_refs": Object {},
                                                          },
                                                          "tests": Array [
                                                            [Function],
                                                            [Function],
                                                          ],
                                                          "transforms": Array [
                                                            [Function],
                                                          ],
                                                        },
                                                        "valid": true,
                                                      }
                                                    }
                                                    name="siteId"
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyPress={[Function]}
                                                    open={false}
                                                    readOnly={false}
                                                    role="combobox"
                                                    tabIndex={0}>
                                                    <div
                                                      aria-autocomplete="list"
                                                      aria-busy={false}
                                                      aria-disabled={false}
                                                      aria-expanded={false}
                                                      aria-haspopup={true}
                                                      aria-live="polite"
                                                      aria-owns="rw_1__listbox"
                                                      aria-readonly={false}
                                                      className="rw-dropdownlist rw-widget"
                                                      meta={
                                                        Object {
                                                          "context": undefined,
                                                          "errorClass": "invalid-field",
                                                          "errors": Object {},
                                                          "invalid": false,
                                                          "onError": [Function],
                                                          "resolvedType": "dropdownlist",
                                                          "schema": StringSchema {
                                                            "_blacklist": BadSet {
                                                              "_map": Object {},
                                                              "_refs": Object {},
                                                            },
                                                            "_conditions": Array [],
                                                            "_deps": Array [],
                                                            "_exclusive": Object {
                                                              "required": false,
                                                            },
                                                            "_label": "Site",
                                                            "_mutate": false,
                                                            "_options": Object {
                                                              "abortEarly": true,
                                                              "recursive": true,
                                                            },
                                                            "_type": "string",
                                                            "_typeError": [Function],
                                                            "_whitelist": BadSet {
                                                              "_map": Object {},
                                                              "_refs": Object {},
                                                            },
                                                            "tests": Array [
                                                              [Function],
                                                              [Function],
                                                            ],
                                                            "transforms": Array [
                                                              [Function],
                                                            ],
                                                          },
                                                          "valid": true,
                                                        }
                                                      }
                                                      name="siteId"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="combobox"
                                                      tabIndex={0}>
                                                      <Select
                                                        className="rw-dropdownlist-picker"
                                                        component="span"
                                                        icon="caret-down"
                                                        label="open dropdown">
                                                        <Button
                                                          className="rw-dropdownlist-picker rw-select"
                                                          component="span"
                                                          icon="caret-down"
                                                          label="open dropdown">
                                                          <span
                                                            aria-label="open dropdown"
                                                            className="rw-dropdownlist-picker rw-select rw-btn"
                                                            tabIndex="-1"
                                                            title="open dropdown">
                                                            <span
                                                              aria-hidden={true}
                                                              className="rw-i rw-i-caret-down" />
                                                          </span>
                                                        </Button>
                                                      </Select>
                                                      <DropdownListInput
                                                        textField="name"
                                                        value={null}>
                                                        <div
                                                          className="rw-input" />
                                                      </DropdownListInput>
                                                    </div>
                                                  </Widget>
                                                </DropdownList>
                                              </Uncontrolled(DropdownList)>
                                            </ChildBridge>
                                          </MessageTrigger>
                                        </MessageListener>
                                      </ChildBridge>
                                    </Binding>
                                  </Field>
                                  <ValidationMessage
                                    className="help-block"
                                    component="span"
                                    errorClass="validation-error"
                                    extract={[Function]}
                                    filter={[Function]}
                                    for="siteId">
                                    <MessageListener
                                      className="help-block validation-error"
                                      component="span"
                                      for="siteId">
                                      <Message
                                        className="help-block validation-error"
                                        component="span"
                                        for="siteId"
                                        messages={Object {}} />
                                    </MessageListener>
                                  </ValidationMessage>
                                </div>
                              </FormGroup>
                            </FormalFieldGroup>
                            <FormalFieldGroup
                              data={
                                Array [
                                  Object {
                                    "_id": "group-2",
                                    "allAddressesGeocoded": true,
                                    "commuters": Array [
                                      "commuter-2",
                                    ],
                                    "name": "Mock Group",
                                    "organizationId": "organization-2",
                                  },
                                ]
                              }
                              filter="contains"
                              label="Group"
                              mapFromValue={[Function]}
                              name="groupId"
                              textField="name"
                              type="dropdownlist"
                              valueField="_id">
                              <FormGroup
                                bsClass="form-group"
                                controlId="group-item-groupId">
                                <div
                                  className="form-group">
                                  <ControlLabel
                                    bsClass="control-label"
                                    srOnly={false}>
                                    <label
                                      className="control-label"
                                      htmlFor="group-item-groupId">
                                      Group
                                    </label>
                                  </ControlLabel>
                                  <Field
                                    className=""
                                    data={
                                      Array [
                                        Object {
                                          "_id": "group-2",
                                          "allAddressesGeocoded": true,
                                          "commuters": Array [
                                            "commuter-2",
                                          ],
                                          "name": "Mock Group",
                                          "organizationId": "organization-2",
                                        },
                                      ]
                                    }
                                    exclusive={false}
                                    filter="contains"
                                    mapFromValue={[Function]}
                                    name="groupId"
                                    textField="name"
                                    type="dropdownlist"
                                    valueField="_id">
                                    <Binding
                                      bindTo={[Function]}
                                      changeProp="onChange"
                                      mapValue={
                                        Object {
                                          "groupId": [Function],
                                        }
                                      }
                                      updateAfterChild={false}
                                      valueProp="value">
                                      <ChildBridge
                                        events="onChange"
                                        onEvent={[Function]}>
                                        <MessageListener
                                          events={
                                            Array [
                                              "onChange",
                                              "onBlur",
                                            ]
                                          }
                                          for="groupId"
                                          mapMessages={[Function]}>
                                          <MessageTrigger
                                            events={
                                              Array [
                                                "onChange",
                                                "onBlur",
                                              ]
                                            }
                                            for="groupId"
                                            mapMessages={[Function]}
                                            messages={Object {}}
                                            noValidate={false}>
                                            <ChildBridge
                                              events={
                                                Array [
                                                  "onChange",
                                                  "onBlur",
                                                ]
                                              }
                                              onEvent={[Function]}>
                                              <Uncontrolled(DropdownList)
                                                className=""
                                                data={
                                                  Array [
                                                    Object {
                                                      "_id": "group-2",
                                                      "allAddressesGeocoded": true,
                                                      "commuters": Array [
                                                        "commuter-2",
                                                      ],
                                                      "name": "Mock Group",
                                                      "organizationId": "organization-2",
                                                    },
                                                  ]
                                                }
                                                filter="contains"
                                                meta={
                                                  Object {
                                                    "context": undefined,
                                                    "errorClass": "invalid-field",
                                                    "errors": Object {},
                                                    "invalid": false,
                                                    "onError": [Function],
                                                    "resolvedType": "dropdownlist",
                                                    "schema": StringSchema {
                                                      "_blacklist": BadSet {
                                                        "_map": Object {},
                                                        "_refs": Object {},
                                                      },
                                                      "_conditions": Array [],
                                                      "_deps": Array [],
                                                      "_exclusive": Object {
                                                        "required": false,
                                                      },
                                                      "_label": "Group",
                                                      "_mutate": false,
                                                      "_options": Object {
                                                        "abortEarly": true,
                                                        "recursive": true,
                                                      },
                                                      "_type": "string",
                                                      "_typeError": [Function],
                                                      "_whitelist": BadSet {
                                                        "_map": Object {},
                                                        "_refs": Object {},
                                                      },
                                                      "tests": Array [
                                                        [Function],
                                                        [Function],
                                                      ],
                                                      "transforms": Array [
                                                        [Function],
                                                      ],
                                                    },
                                                    "valid": true,
                                                  }
                                                }
                                                name="groupId"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                textField="name"
                                                value={null}
                                                valueField="_id">
                                                <DropdownList
                                                  ariaActiveDescendantKey="dropdownlist"
                                                  caseSensitive={false}
                                                  className=""
                                                  data={
                                                    Array [
                                                      Object {
                                                        "_id": "group-2",
                                                        "allAddressesGeocoded": true,
                                                        "commuters": Array [
                                                          "commuter-2",
                                                        ],
                                                        "name": "Mock Group",
                                                        "organizationId": "organization-2",
                                                      },
                                                    ]
                                                  }
                                                  delay={500}
                                                  filter="contains"
                                                  messages={
                                                    Object {
                                                      "emptyFilter": "The filter returned no results",
                                                      "emptyList": "There are no items in this list",
                                                      "filterPlaceholder": "",
                                                      "open": "open dropdown",
                                                    }
                                                  }
                                                  meta={
                                                    Object {
                                                      "context": undefined,
                                                      "errorClass": "invalid-field",
                                                      "errors": Object {},
                                                      "invalid": false,
                                                      "onError": [Function],
                                                      "resolvedType": "dropdownlist",
                                                      "schema": StringSchema {
                                                        "_blacklist": BadSet {
                                                          "_map": Object {},
                                                          "_refs": Object {},
                                                        },
                                                        "_conditions": Array [],
                                                        "_deps": Array [],
                                                        "_exclusive": Object {
                                                          "required": false,
                                                        },
                                                        "_label": "Group",
                                                        "_mutate": false,
                                                        "_options": Object {
                                                          "abortEarly": true,
                                                          "recursive": true,
                                                        },
                                                        "_type": "string",
                                                        "_typeError": [Function],
                                                        "_whitelist": BadSet {
                                                          "_map": Object {},
                                                          "_refs": Object {},
                                                        },
                                                        "tests": Array [
                                                          [Function],
                                                          [Function],
                                                        ],
                                                        "transforms": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "valid": true,
                                                    }
                                                  }
                                                  minLength={1}
                                                  name="groupId"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onSearch={[Function]}
                                                  onToggle={[Function]}
                                                  open={false}
                                                  searchTerm=""
                                                  textField="name"
                                                  value={null}
                                                  valueField="_id">
                                                  <Widget
                                                    aria-autocomplete="list"
                                                    aria-busy={false}
                                                    aria-disabled={false}
                                                    aria-expanded={false}
                                                    aria-haspopup={true}
                                                    aria-live="polite"
                                                    aria-owns="rw_2__listbox"
                                                    aria-readonly={false}
                                                    className="rw-dropdownlist"
                                                    disabled={false}
                                                    meta={
                                                      Object {
                                                        "context": undefined,
                                                        "errorClass": "invalid-field",
                                                        "errors": Object {},
                                                        "invalid": false,
                                                        "onError": [Function],
                                                        "resolvedType": "dropdownlist",
                                                        "schema": StringSchema {
                                                          "_blacklist": BadSet {
                                                            "_map": Object {},
                                                            "_refs": Object {},
                                                          },
                                                          "_conditions": Array [],
                                                          "_deps": Array [],
                                                          "_exclusive": Object {
                                                            "required": false,
                                                          },
                                                          "_label": "Group",
                                                          "_mutate": false,
                                                          "_options": Object {
                                                            "abortEarly": true,
                                                            "recursive": true,
                                                          },
                                                          "_type": "string",
                                                          "_typeError": [Function],
                                                          "_whitelist": BadSet {
                                                            "_map": Object {},
                                                            "_refs": Object {},
                                                          },
                                                          "tests": Array [
                                                            [Function],
                                                            [Function],
                                                          ],
                                                          "transforms": Array [
                                                            [Function],
                                                          ],
                                                        },
                                                        "valid": true,
                                                      }
                                                    }
                                                    name="groupId"
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyPress={[Function]}
                                                    open={false}
                                                    readOnly={false}
                                                    role="combobox"
                                                    tabIndex={0}>
                                                    <div
                                                      aria-autocomplete="list"
                                                      aria-busy={false}
                                                      aria-disabled={false}
                                                      aria-expanded={false}
                                                      aria-haspopup={true}
                                                      aria-live="polite"
                                                      aria-owns="rw_2__listbox"
                                                      aria-readonly={false}
                                                      className="rw-dropdownlist rw-widget"
                                                      meta={
                                                        Object {
                                                          "context": undefined,
                                                          "errorClass": "invalid-field",
                                                          "errors": Object {},
                                                          "invalid": false,
                                                          "onError": [Function],
                                                          "resolvedType": "dropdownlist",
                                                          "schema": StringSchema {
                                                            "_blacklist": BadSet {
                                                              "_map": Object {},
                                                              "_refs": Object {},
                                                            },
                                                            "_conditions": Array [],
                                                            "_deps": Array [],
                                                            "_exclusive": Object {
                                                              "required": false,
                                                            },
                                                            "_label": "Group",
                                                            "_mutate": false,
                                                            "_options": Object {
                                                              "abortEarly": true,
                                                              "recursive": true,
                                                            },
                                                            "_type": "string",
                                                            "_typeError": [Function],
                                                            "_whitelist": BadSet {
                                                              "_map": Object {},
                                                              "_refs": Object {},
                                                            },
                                                            "tests": Array [
                                                              [Function],
                                                              [Function],
                                                            ],
                                                            "transforms": Array [
                                                              [Function],
                                                            ],
                                                          },
                                                          "valid": true,
                                                        }
                                                      }
                                                      name="groupId"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="combobox"
                                                      tabIndex={0}>
                                                      <Select
                                                        className="rw-dropdownlist-picker"
                                                        component="span"
                                                        icon="caret-down"
                                                        label="open dropdown">
                                                        <Button
                                                          className="rw-dropdownlist-picker rw-select"
                                                          component="span"
                                                          icon="caret-down"
                                                          label="open dropdown">
                                                          <span
                                                            aria-label="open dropdown"
                                                            className="rw-dropdownlist-picker rw-select rw-btn"
                                                            tabIndex="-1"
                                                            title="open dropdown">
                                                            <span
                                                              aria-hidden={true}
                                                              className="rw-i rw-i-caret-down" />
                                                          </span>
                                                        </Button>
                                                      </Select>
                                                      <DropdownListInput
                                                        textField="name"
                                                        value={null}>
                                                        <div
                                                          className="rw-input" />
                                                      </DropdownListInput>
                                                    </div>
                                                  </Widget>
                                                </DropdownList>
                                              </Uncontrolled(DropdownList)>
                                            </ChildBridge>
                                          </MessageTrigger>
                                        </MessageListener>
                                      </ChildBridge>
                                    </Binding>
                                  </Field>
                                  <ValidationMessage
                                    className="help-block"
                                    component="span"
                                    errorClass="validation-error"
                                    extract={[Function]}
                                    filter={[Function]}
                                    for="groupId">
                                    <MessageListener
                                      className="help-block validation-error"
                                      component="span"
                                      for="groupId">
                                      <Message
                                        className="help-block validation-error"
                                        component="span"
                                        for="groupId"
                                        messages={Object {}} />
                                    </MessageListener>
                                  </ValidationMessage>
                                </div>
                              </FormGroup>
                            </FormalFieldGroup>
                            <Button
                              className="btn btn-success"
                              component="button"
                              events={
                                Array [
                                  "onClick",
                                ]
                              }
                              type="submit">
                              <button
                                className="btn btn-success"
                                onClick={[Function]}>
                                Create
                              </button>
                            </Button>
                          </form>
                        </MessageContainer>
                      </MessageListener>
                    </BindingContext>
                  </Form>
                </Uncontrolled(Form)>
              </div>
            </Col>
          </div>
        </Row>
      </div>
    </Grid>
  </CreateAnalysis>
</Connect(CreateAnalysis)>
`;

exports[`Container > CreateAnalysis Create analysis 1`] = `
Object {
  "payload": Object {
    "args": Array [
      "/analysis/new-entity-id",
    ],
    "method": "push",
  },
  "type": "@@router/CALL_HISTORY_METHOD",
}
`;
